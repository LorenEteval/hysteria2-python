// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockTrafficLogger is an autogenerated mock type for the TrafficLogger type
type MockTrafficLogger struct {
	mock.Mock
}

type MockTrafficLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTrafficLogger) EXPECT() *MockTrafficLogger_Expecter {
	return &MockTrafficLogger_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: id, tx, rx
func (_m *MockTrafficLogger) Log(id string, tx uint64, rx uint64) bool {
	ret := _m.Called(id, tx, rx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) bool); ok {
		r0 = rf(id, tx, rx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTrafficLogger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockTrafficLogger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - id string
//   - tx uint64
//   - rx uint64
func (_e *MockTrafficLogger_Expecter) Log(id interface{}, tx interface{}, rx interface{}) *MockTrafficLogger_Log_Call {
	return &MockTrafficLogger_Log_Call{Call: _e.mock.On("Log", id, tx, rx)}
}

func (_c *MockTrafficLogger_Log_Call) Run(run func(id string, tx uint64, rx uint64)) *MockTrafficLogger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockTrafficLogger_Log_Call) Return(ok bool) *MockTrafficLogger_Log_Call {
	_c.Call.Return(ok)
	return _c
}

func (_c *MockTrafficLogger_Log_Call) RunAndReturn(run func(string, uint64, uint64) bool) *MockTrafficLogger_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTrafficLogger creates a new instance of MockTrafficLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTrafficLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTrafficLogger {
	mock := &MockTrafficLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
